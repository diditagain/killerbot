//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Resources/MainInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInputActions"",
    ""maps"": [
        {
            ""name"": ""MainMap"",
            ""id"": ""2b90f708-0aad-4796-8acc-d5af696e9554"",
            ""actions"": [
                {
                    ""name"": ""AimPosition"",
                    ""type"": ""Value"",
                    ""id"": ""40f4aeb8-b42f-4dc8-9b58-227a9b9a8a50"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchMain"",
                    ""type"": ""Button"",
                    ""id"": ""cb37c463-b695-4be3-95ea-3aadda45a33e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""1fa5adec-7fbc-4d22-a06a-eb44a769002c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d6b978d8-739f-4b10-865d-31e394a53aa4"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fcbdeade-b518-43b5-ba3e-c066f389a963"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchMain"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f80acb90-aed4-4c8d-9349-742fe6c6699d"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MainMap
        m_MainMap = asset.FindActionMap("MainMap", throwIfNotFound: true);
        m_MainMap_AimPosition = m_MainMap.FindAction("AimPosition", throwIfNotFound: true);
        m_MainMap_TouchMain = m_MainMap.FindAction("TouchMain", throwIfNotFound: true);
        m_MainMap_TouchPosition = m_MainMap.FindAction("TouchPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainMap
    private readonly InputActionMap m_MainMap;
    private IMainMapActions m_MainMapActionsCallbackInterface;
    private readonly InputAction m_MainMap_AimPosition;
    private readonly InputAction m_MainMap_TouchMain;
    private readonly InputAction m_MainMap_TouchPosition;
    public struct MainMapActions
    {
        private @MainInputActions m_Wrapper;
        public MainMapActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @AimPosition => m_Wrapper.m_MainMap_AimPosition;
        public InputAction @TouchMain => m_Wrapper.m_MainMap_TouchMain;
        public InputAction @TouchPosition => m_Wrapper.m_MainMap_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_MainMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMapActions set) { return set.Get(); }
        public void SetCallbacks(IMainMapActions instance)
        {
            if (m_Wrapper.m_MainMapActionsCallbackInterface != null)
            {
                @AimPosition.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnAimPosition;
                @AimPosition.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnAimPosition;
                @AimPosition.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnAimPosition;
                @TouchMain.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnTouchMain;
                @TouchMain.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnTouchMain;
                @TouchMain.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnTouchMain;
                @TouchPosition.started -= m_Wrapper.m_MainMapActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_MainMapActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_MainMapActionsCallbackInterface.OnTouchPosition;
            }
            m_Wrapper.m_MainMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AimPosition.started += instance.OnAimPosition;
                @AimPosition.performed += instance.OnAimPosition;
                @AimPosition.canceled += instance.OnAimPosition;
                @TouchMain.started += instance.OnTouchMain;
                @TouchMain.performed += instance.OnTouchMain;
                @TouchMain.canceled += instance.OnTouchMain;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
            }
        }
    }
    public MainMapActions @MainMap => new MainMapActions(this);
    public interface IMainMapActions
    {
        void OnAimPosition(InputAction.CallbackContext context);
        void OnTouchMain(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
}
